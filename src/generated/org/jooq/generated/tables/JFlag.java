/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JMedihub;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JBookmark.BookmarkPath;
import org.jooq.generated.tables.JComment.CommentPath;
import org.jooq.generated.tables.JNotify.NotifyPath;
import org.jooq.generated.tables.JPicture.PicturePath;
import org.jooq.generated.tables.JPrefer.PreferPath;
import org.jooq.generated.tables.records.FlagRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JFlag extends TableImpl<FlagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>medihub.flag</code>
     */
    public static final JFlag FLAG = new JFlag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FlagRecord> getRecordType() {
        return FlagRecord.class;
    }

    /**
     * The column <code>medihub.flag.flag_seq</code>.
     */
    public final TableField<FlagRecord, Long> FLAG_SEQ = createField(DSL.name("flag_seq"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>medihub.flag.flag_entity_seq</code>.
     */
    public final TableField<FlagRecord, Long> FLAG_ENTITY_SEQ = createField(DSL.name("flag_entity_seq"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>medihub.flag.flag_type</code>.
     */
    public final TableField<FlagRecord, String> FLAG_TYPE = createField(DSL.name("flag_type"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    private JFlag(Name alias, Table<FlagRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JFlag(Name alias, Table<FlagRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>medihub.flag</code> table reference
     */
    public JFlag(String alias) {
        this(DSL.name(alias), FLAG);
    }

    /**
     * Create an aliased <code>medihub.flag</code> table reference
     */
    public JFlag(Name alias) {
        this(alias, FLAG);
    }

    /**
     * Create a <code>medihub.flag</code> table reference
     */
    public JFlag() {
        this(DSL.name("flag"), null);
    }

    public <O extends Record> JFlag(Table<O> path, ForeignKey<O, FlagRecord> childPath, InverseForeignKey<O, FlagRecord> parentPath) {
        super(path, childPath, parentPath, FLAG);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FlagPath extends JFlag implements Path<FlagRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FlagPath(Table<O> path, ForeignKey<O, FlagRecord> childPath, InverseForeignKey<O, FlagRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FlagPath(Name alias, Table<FlagRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FlagPath as(String alias) {
            return new FlagPath(DSL.name(alias), this);
        }

        @Override
        public FlagPath as(Name alias) {
            return new FlagPath(alias, this);
        }

        @Override
        public FlagPath as(Table<?> alias) {
            return new FlagPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMedihub.MEDIHUB;
    }

    @Override
    public Identity<FlagRecord, Long> getIdentity() {
        return (Identity<FlagRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FlagRecord> getPrimaryKey() {
        return Keys.KEY_FLAG_PRIMARY;
    }

    private transient NotifyPath _notify_;

    /**
     * Get the implicit to-many join path to the <code>medihub.notify</code>
     * table
     */
    public NotifyPath notify_() {
        if (_notify_ == null)
            _notify_ = new NotifyPath(this, null, Keys.FK15AYB2U2LQFK9T0ULVJC6HWYQ.getInverseKey());

        return _notify_;
    }

    private transient BookmarkPath _bookmark;

    /**
     * Get the implicit to-many join path to the <code>medihub.bookmark</code>
     * table
     */
    public BookmarkPath bookmark() {
        if (_bookmark == null)
            _bookmark = new BookmarkPath(this, null, Keys.FK45D3D2AN1Y5E1391IEJE9BW16.getInverseKey());

        return _bookmark;
    }

    private transient PicturePath _picture;

    /**
     * Get the implicit to-many join path to the <code>medihub.picture</code>
     * table
     */
    public PicturePath picture() {
        if (_picture == null)
            _picture = new PicturePath(this, null, Keys.FK4YBDG8J8SBNT5OHB4SY75RC82.getInverseKey());

        return _picture;
    }

    private transient PreferPath _prefer;

    /**
     * Get the implicit to-many join path to the <code>medihub.prefer</code>
     * table
     */
    public PreferPath prefer() {
        if (_prefer == null)
            _prefer = new PreferPath(this, null, Keys.FK8MDYUHI16SI3QB537GEU33AL0.getInverseKey());

        return _prefer;
    }

    private transient CommentPath _comment;

    /**
     * Get the implicit to-many join path to the <code>medihub.comment</code>
     * table
     */
    public CommentPath comment() {
        if (_comment == null)
            _comment = new CommentPath(this, null, Keys.FKLAUGTV9AVDAV02AJDXJ3KU3C6.getInverseKey());

        return _comment;
    }

    @Override
    public JFlag as(String alias) {
        return new JFlag(DSL.name(alias), this);
    }

    @Override
    public JFlag as(Name alias) {
        return new JFlag(alias, this);
    }

    @Override
    public JFlag as(Table<?> alias) {
        return new JFlag(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JFlag rename(String name) {
        return new JFlag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JFlag rename(Name name) {
        return new JFlag(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JFlag rename(Table<?> name) {
        return new JFlag(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFlag where(Condition condition) {
        return new JFlag(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFlag where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFlag where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFlag where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JFlag where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JFlag where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JFlag where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JFlag where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFlag whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFlag whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
