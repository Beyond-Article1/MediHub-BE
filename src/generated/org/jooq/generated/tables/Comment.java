/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Medihub;
import org.jooq.generated.tables.Flag.FlagPath;
import org.jooq.generated.tables.User.UserPath;
import org.jooq.generated.tables.records.CommentRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Comment extends TableImpl<CommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>medihub.comment</code>
     */
    public static final Comment COMMENT = new Comment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommentRecord> getRecordType() {
        return CommentRecord.class;
    }

    /**
     * The column <code>medihub.comment.comment_seq</code>.
     */
    public final TableField<CommentRecord, Long> COMMENT_SEQ = createField(DSL.name("comment_seq"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>medihub.comment.created_at</code>.
     */
    public final TableField<CommentRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>medihub.comment.deleted_at</code>.
     */
    public final TableField<CommentRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>medihub.comment.updated_at</code>.
     */
    public final TableField<CommentRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>medihub.comment.comment_content</code>.
     */
    public final TableField<CommentRecord, String> COMMENT_CONTENT = createField(DSL.name("comment_content"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>medihub.comment.comment_is_deleted</code>.
     */
    public final TableField<CommentRecord, Boolean> COMMENT_IS_DELETED = createField(DSL.name("comment_is_deleted"), SQLDataType.BIT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIT)), this, "");

    /**
     * The column <code>medihub.comment.flag_seq</code>.
     */
    public final TableField<CommentRecord, Long> FLAG_SEQ = createField(DSL.name("flag_seq"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>medihub.comment.user_seq</code>.
     */
    public final TableField<CommentRecord, Long> USER_SEQ = createField(DSL.name("user_seq"), SQLDataType.BIGINT.nullable(false), this, "");

    private Comment(Name alias, Table<CommentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Comment(Name alias, Table<CommentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>medihub.comment</code> table reference
     */
    public Comment(String alias) {
        this(DSL.name(alias), COMMENT);
    }

    /**
     * Create an aliased <code>medihub.comment</code> table reference
     */
    public Comment(Name alias) {
        this(alias, COMMENT);
    }

    /**
     * Create a <code>medihub.comment</code> table reference
     */
    public Comment() {
        this(DSL.name("comment"), null);
    }

    public <O extends Record> Comment(Table<O> path, ForeignKey<O, CommentRecord> childPath, InverseForeignKey<O, CommentRecord> parentPath) {
        super(path, childPath, parentPath, COMMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CommentPath extends Comment implements Path<CommentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CommentPath(Table<O> path, ForeignKey<O, CommentRecord> childPath, InverseForeignKey<O, CommentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CommentPath(Name alias, Table<CommentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CommentPath as(String alias) {
            return new CommentPath(DSL.name(alias), this);
        }

        @Override
        public CommentPath as(Name alias) {
            return new CommentPath(alias, this);
        }

        @Override
        public CommentPath as(Table<?> alias) {
            return new CommentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Medihub.MEDIHUB;
    }

    @Override
    public Identity<CommentRecord, Long> getIdentity() {
        return (Identity<CommentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CommentRecord> getPrimaryKey() {
        return Keys.KEY_COMMENT_PRIMARY;
    }

    @Override
    public List<ForeignKey<CommentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKLAUGTV9AVDAV02AJDXJ3KU3C6, Keys.FKM3LBKSC4VEX8FH6IHX90WCB3B);
    }

    private transient FlagPath _flag;

    /**
     * Get the implicit join path to the <code>medihub.flag</code> table.
     */
    public FlagPath flag() {
        if (_flag == null)
            _flag = new FlagPath(this, Keys.FKLAUGTV9AVDAV02AJDXJ3KU3C6, null);

        return _flag;
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>medihub.user</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.FKM3LBKSC4VEX8FH6IHX90WCB3B, null);

        return _user;
    }

    @Override
    public Comment as(String alias) {
        return new Comment(DSL.name(alias), this);
    }

    @Override
    public Comment as(Name alias) {
        return new Comment(alias, this);
    }

    @Override
    public Comment as(Table<?> alias) {
        return new Comment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(String name) {
        return new Comment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(Name name) {
        return new Comment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(Table<?> name) {
        return new Comment(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Comment where(Condition condition) {
        return new Comment(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Comment where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Comment where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Comment where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Comment where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Comment where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Comment where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Comment where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Comment whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Comment whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
