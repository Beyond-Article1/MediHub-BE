/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Medihub;
import org.jooq.generated.tables.Flag.FlagPath;
import org.jooq.generated.tables.records.PictureRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Picture extends TableImpl<PictureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>medihub.picture</code>
     */
    public static final Picture PICTURE = new Picture();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PictureRecord> getRecordType() {
        return PictureRecord.class;
    }

    /**
     * The column <code>medihub.picture.picture_seq</code>.
     */
    public final TableField<PictureRecord, Long> PICTURE_SEQ = createField(DSL.name("picture_seq"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>medihub.picture.created_at</code>.
     */
    public final TableField<PictureRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>medihub.picture.deleted_at</code>.
     */
    public final TableField<PictureRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>medihub.picture.picture_changed_name</code>.
     */
    public final TableField<PictureRecord, String> PICTURE_CHANGED_NAME = createField(DSL.name("picture_changed_name"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>medihub.picture.picture_is_deleted</code>.
     */
    public final TableField<PictureRecord, Boolean> PICTURE_IS_DELETED = createField(DSL.name("picture_is_deleted"), SQLDataType.BIT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIT)), this, "");

    /**
     * The column <code>medihub.picture.picture_name</code>.
     */
    public final TableField<PictureRecord, String> PICTURE_NAME = createField(DSL.name("picture_name"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>medihub.picture.picture_type</code>.
     */
    public final TableField<PictureRecord, String> PICTURE_TYPE = createField(DSL.name("picture_type"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>medihub.picture.picture_url</code>.
     */
    public final TableField<PictureRecord, String> PICTURE_URL = createField(DSL.name("picture_url"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>medihub.picture.flag_seq</code>.
     */
    public final TableField<PictureRecord, Long> FLAG_SEQ = createField(DSL.name("flag_seq"), SQLDataType.BIGINT.nullable(false), this, "");

    private Picture(Name alias, Table<PictureRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Picture(Name alias, Table<PictureRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>medihub.picture</code> table reference
     */
    public Picture(String alias) {
        this(DSL.name(alias), PICTURE);
    }

    /**
     * Create an aliased <code>medihub.picture</code> table reference
     */
    public Picture(Name alias) {
        this(alias, PICTURE);
    }

    /**
     * Create a <code>medihub.picture</code> table reference
     */
    public Picture() {
        this(DSL.name("picture"), null);
    }

    public <O extends Record> Picture(Table<O> path, ForeignKey<O, PictureRecord> childPath, InverseForeignKey<O, PictureRecord> parentPath) {
        super(path, childPath, parentPath, PICTURE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PicturePath extends Picture implements Path<PictureRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PicturePath(Table<O> path, ForeignKey<O, PictureRecord> childPath, InverseForeignKey<O, PictureRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PicturePath(Name alias, Table<PictureRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PicturePath as(String alias) {
            return new PicturePath(DSL.name(alias), this);
        }

        @Override
        public PicturePath as(Name alias) {
            return new PicturePath(alias, this);
        }

        @Override
        public PicturePath as(Table<?> alias) {
            return new PicturePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Medihub.MEDIHUB;
    }

    @Override
    public Identity<PictureRecord, Long> getIdentity() {
        return (Identity<PictureRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PictureRecord> getPrimaryKey() {
        return Keys.KEY_PICTURE_PRIMARY;
    }

    @Override
    public List<ForeignKey<PictureRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK4YBDG8J8SBNT5OHB4SY75RC82);
    }

    private transient FlagPath _flag;

    /**
     * Get the implicit join path to the <code>medihub.flag</code> table.
     */
    public FlagPath flag() {
        if (_flag == null)
            _flag = new FlagPath(this, Keys.FK4YBDG8J8SBNT5OHB4SY75RC82, null);

        return _flag;
    }

    @Override
    public Picture as(String alias) {
        return new Picture(DSL.name(alias), this);
    }

    @Override
    public Picture as(Name alias) {
        return new Picture(alias, this);
    }

    @Override
    public Picture as(Table<?> alias) {
        return new Picture(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Picture rename(String name) {
        return new Picture(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Picture rename(Name name) {
        return new Picture(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Picture rename(Table<?> name) {
        return new Picture(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Picture where(Condition condition) {
        return new Picture(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Picture where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Picture where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Picture where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Picture where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Picture where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Picture where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Picture where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Picture whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Picture whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
