/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JMedihub;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JCaseSharing.CaseSharingPath;
import org.jooq.generated.tables.JUser.UserPath;
import org.jooq.generated.tables.records.CaseSharingCommentRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCaseSharingComment extends TableImpl<CaseSharingCommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>medihub.case_sharing_comment</code>
     */
    public static final JCaseSharingComment CASE_SHARING_COMMENT = new JCaseSharingComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CaseSharingCommentRecord> getRecordType() {
        return CaseSharingCommentRecord.class;
    }

    /**
     * The column
     * <code>medihub.case_sharing_comment.case_sharing_comment_seq</code>.
     */
    public final TableField<CaseSharingCommentRecord, Long> CASE_SHARING_COMMENT_SEQ = createField(DSL.name("case_sharing_comment_seq"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>medihub.case_sharing_comment.created_at</code>.
     */
    public final TableField<CaseSharingCommentRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>medihub.case_sharing_comment.deleted_at</code>.
     */
    public final TableField<CaseSharingCommentRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>medihub.case_sharing_comment.updated_at</code>.
     */
    public final TableField<CaseSharingCommentRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column
     * <code>medihub.case_sharing_comment.case_sharing_block_id</code>.
     */
    public final TableField<CaseSharingCommentRecord, String> CASE_SHARING_BLOCK_ID = createField(DSL.name("case_sharing_block_id"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>medihub.case_sharing_comment.case_sharing_comment_content</code>.
     */
    public final TableField<CaseSharingCommentRecord, String> CASE_SHARING_COMMENT_CONTENT = createField(DSL.name("case_sharing_comment_content"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>medihub.case_sharing_comment.case_sharing_seq</code>.
     */
    public final TableField<CaseSharingCommentRecord, Long> CASE_SHARING_SEQ = createField(DSL.name("case_sharing_seq"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>medihub.case_sharing_comment.user_seq</code>.
     */
    public final TableField<CaseSharingCommentRecord, Long> USER_SEQ = createField(DSL.name("user_seq"), SQLDataType.BIGINT.nullable(false), this, "");

    private JCaseSharingComment(Name alias, Table<CaseSharingCommentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JCaseSharingComment(Name alias, Table<CaseSharingCommentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>medihub.case_sharing_comment</code> table
     * reference
     */
    public JCaseSharingComment(String alias) {
        this(DSL.name(alias), CASE_SHARING_COMMENT);
    }

    /**
     * Create an aliased <code>medihub.case_sharing_comment</code> table
     * reference
     */
    public JCaseSharingComment(Name alias) {
        this(alias, CASE_SHARING_COMMENT);
    }

    /**
     * Create a <code>medihub.case_sharing_comment</code> table reference
     */
    public JCaseSharingComment() {
        this(DSL.name("case_sharing_comment"), null);
    }

    public <O extends Record> JCaseSharingComment(Table<O> path, ForeignKey<O, CaseSharingCommentRecord> childPath, InverseForeignKey<O, CaseSharingCommentRecord> parentPath) {
        super(path, childPath, parentPath, CASE_SHARING_COMMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CaseSharingCommentPath extends JCaseSharingComment implements Path<CaseSharingCommentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CaseSharingCommentPath(Table<O> path, ForeignKey<O, CaseSharingCommentRecord> childPath, InverseForeignKey<O, CaseSharingCommentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CaseSharingCommentPath(Name alias, Table<CaseSharingCommentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CaseSharingCommentPath as(String alias) {
            return new CaseSharingCommentPath(DSL.name(alias), this);
        }

        @Override
        public CaseSharingCommentPath as(Name alias) {
            return new CaseSharingCommentPath(alias, this);
        }

        @Override
        public CaseSharingCommentPath as(Table<?> alias) {
            return new CaseSharingCommentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMedihub.MEDIHUB;
    }

    @Override
    public Identity<CaseSharingCommentRecord, Long> getIdentity() {
        return (Identity<CaseSharingCommentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CaseSharingCommentRecord> getPrimaryKey() {
        return Keys.KEY_CASE_SHARING_COMMENT_PRIMARY;
    }

    @Override
    public List<ForeignKey<CaseSharingCommentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKGESKGLAJMW9KKSF82EBCODCQY, Keys.FKT3A3UVFN0828VATF15QTHK40K);
    }

    private transient CaseSharingPath _caseSharing;

    /**
     * Get the implicit join path to the <code>medihub.case_sharing</code>
     * table.
     */
    public CaseSharingPath caseSharing() {
        if (_caseSharing == null)
            _caseSharing = new CaseSharingPath(this, Keys.FKGESKGLAJMW9KKSF82EBCODCQY, null);

        return _caseSharing;
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>medihub.user</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.FKT3A3UVFN0828VATF15QTHK40K, null);

        return _user;
    }

    @Override
    public JCaseSharingComment as(String alias) {
        return new JCaseSharingComment(DSL.name(alias), this);
    }

    @Override
    public JCaseSharingComment as(Name alias) {
        return new JCaseSharingComment(alias, this);
    }

    @Override
    public JCaseSharingComment as(Table<?> alias) {
        return new JCaseSharingComment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JCaseSharingComment rename(String name) {
        return new JCaseSharingComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCaseSharingComment rename(Name name) {
        return new JCaseSharingComment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCaseSharingComment rename(Table<?> name) {
        return new JCaseSharingComment(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCaseSharingComment where(Condition condition) {
        return new JCaseSharingComment(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCaseSharingComment where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCaseSharingComment where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCaseSharingComment where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCaseSharingComment where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCaseSharingComment where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCaseSharingComment where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCaseSharingComment where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCaseSharingComment whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCaseSharingComment whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
