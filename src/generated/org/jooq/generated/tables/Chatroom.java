/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Medihub;
import org.jooq.generated.tables.Chat.ChatPath;
import org.jooq.generated.tables.records.ChatroomRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Chatroom extends TableImpl<ChatroomRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>medihub.chatroom</code>
     */
    public static final Chatroom CHATROOM = new Chatroom();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChatroomRecord> getRecordType() {
        return ChatroomRecord.class;
    }

    /**
     * The column <code>medihub.chatroom.chatroom_seq</code>.
     */
    public final TableField<ChatroomRecord, Long> CHATROOM_SEQ = createField(DSL.name("chatroom_seq"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>medihub.chatroom.created_at</code>.
     */
    public final TableField<ChatroomRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>medihub.chatroom.deleted_at</code>.
     */
    public final TableField<ChatroomRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>medihub.chatroom.updated_at</code>.
     */
    public final TableField<ChatroomRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>medihub.chatroom.chatroom_default_name</code>.
     */
    public final TableField<ChatroomRecord, String> CHATROOM_DEFAULT_NAME = createField(DSL.name("chatroom_default_name"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    private Chatroom(Name alias, Table<ChatroomRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Chatroom(Name alias, Table<ChatroomRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>medihub.chatroom</code> table reference
     */
    public Chatroom(String alias) {
        this(DSL.name(alias), CHATROOM);
    }

    /**
     * Create an aliased <code>medihub.chatroom</code> table reference
     */
    public Chatroom(Name alias) {
        this(alias, CHATROOM);
    }

    /**
     * Create a <code>medihub.chatroom</code> table reference
     */
    public Chatroom() {
        this(DSL.name("chatroom"), null);
    }

    public <O extends Record> Chatroom(Table<O> path, ForeignKey<O, ChatroomRecord> childPath, InverseForeignKey<O, ChatroomRecord> parentPath) {
        super(path, childPath, parentPath, CHATROOM);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ChatroomPath extends Chatroom implements Path<ChatroomRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ChatroomPath(Table<O> path, ForeignKey<O, ChatroomRecord> childPath, InverseForeignKey<O, ChatroomRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ChatroomPath(Name alias, Table<ChatroomRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ChatroomPath as(String alias) {
            return new ChatroomPath(DSL.name(alias), this);
        }

        @Override
        public ChatroomPath as(Name alias) {
            return new ChatroomPath(alias, this);
        }

        @Override
        public ChatroomPath as(Table<?> alias) {
            return new ChatroomPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Medihub.MEDIHUB;
    }

    @Override
    public Identity<ChatroomRecord, Long> getIdentity() {
        return (Identity<ChatroomRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChatroomRecord> getPrimaryKey() {
        return Keys.KEY_CHATROOM_PRIMARY;
    }

    private transient ChatPath _chat;

    /**
     * Get the implicit to-many join path to the <code>medihub.chat</code> table
     */
    public ChatPath chat() {
        if (_chat == null)
            _chat = new ChatPath(this, null, Keys.FK53X2GHIO91G1T1AFMGXM1VCE8.getInverseKey());

        return _chat;
    }

    @Override
    public Chatroom as(String alias) {
        return new Chatroom(DSL.name(alias), this);
    }

    @Override
    public Chatroom as(Name alias) {
        return new Chatroom(alias, this);
    }

    @Override
    public Chatroom as(Table<?> alias) {
        return new Chatroom(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Chatroom rename(String name) {
        return new Chatroom(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Chatroom rename(Name name) {
        return new Chatroom(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Chatroom rename(Table<?> name) {
        return new Chatroom(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chatroom where(Condition condition) {
        return new Chatroom(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chatroom where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chatroom where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chatroom where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Chatroom where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Chatroom where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Chatroom where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Chatroom where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chatroom whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chatroom whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
