/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JMedihub;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.CpSearchCategoryDataRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCpSearchCategoryData extends TableImpl<CpSearchCategoryDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>medihub.cp_search_category_data</code>
     */
    public static final JCpSearchCategoryData CP_SEARCH_CATEGORY_DATA = new JCpSearchCategoryData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CpSearchCategoryDataRecord> getRecordType() {
        return CpSearchCategoryDataRecord.class;
    }

    /**
     * The column
     * <code>medihub.cp_search_category_data.cp_search_category_data_seq</code>.
     */
    public final TableField<CpSearchCategoryDataRecord, Long> CP_SEARCH_CATEGORY_DATA_SEQ = createField(DSL.name("cp_search_category_data_seq"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>medihub.cp_search_category_data.created_at</code>.
     */
    public final TableField<CpSearchCategoryDataRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>medihub.cp_search_category_data.deleted_at</code>.
     */
    public final TableField<CpSearchCategoryDataRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>medihub.cp_search_category_data.updated_at</code>.
     */
    public final TableField<CpSearchCategoryDataRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column
     * <code>medihub.cp_search_category_data.cp_search_category_data_name</code>.
     */
    public final TableField<CpSearchCategoryDataRecord, String> CP_SEARCH_CATEGORY_DATA_NAME = createField(DSL.name("cp_search_category_data_name"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>medihub.cp_search_category_data.cp_search_category_seq</code>.
     */
    public final TableField<CpSearchCategoryDataRecord, Long> CP_SEARCH_CATEGORY_SEQ = createField(DSL.name("cp_search_category_seq"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>medihub.cp_search_category_data.user_seq</code>.
     */
    public final TableField<CpSearchCategoryDataRecord, Long> USER_SEQ = createField(DSL.name("user_seq"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    private JCpSearchCategoryData(Name alias, Table<CpSearchCategoryDataRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JCpSearchCategoryData(Name alias, Table<CpSearchCategoryDataRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>medihub.cp_search_category_data</code> table
     * reference
     */
    public JCpSearchCategoryData(String alias) {
        this(DSL.name(alias), CP_SEARCH_CATEGORY_DATA);
    }

    /**
     * Create an aliased <code>medihub.cp_search_category_data</code> table
     * reference
     */
    public JCpSearchCategoryData(Name alias) {
        this(alias, CP_SEARCH_CATEGORY_DATA);
    }

    /**
     * Create a <code>medihub.cp_search_category_data</code> table reference
     */
    public JCpSearchCategoryData() {
        this(DSL.name("cp_search_category_data"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMedihub.MEDIHUB;
    }

    @Override
    public Identity<CpSearchCategoryDataRecord, Long> getIdentity() {
        return (Identity<CpSearchCategoryDataRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CpSearchCategoryDataRecord> getPrimaryKey() {
        return Keys.KEY_CP_SEARCH_CATEGORY_DATA_PRIMARY;
    }

    @Override
    public JCpSearchCategoryData as(String alias) {
        return new JCpSearchCategoryData(DSL.name(alias), this);
    }

    @Override
    public JCpSearchCategoryData as(Name alias) {
        return new JCpSearchCategoryData(alias, this);
    }

    @Override
    public JCpSearchCategoryData as(Table<?> alias) {
        return new JCpSearchCategoryData(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JCpSearchCategoryData rename(String name) {
        return new JCpSearchCategoryData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCpSearchCategoryData rename(Name name) {
        return new JCpSearchCategoryData(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCpSearchCategoryData rename(Table<?> name) {
        return new JCpSearchCategoryData(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCpSearchCategoryData where(Condition condition) {
        return new JCpSearchCategoryData(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCpSearchCategoryData where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCpSearchCategoryData where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCpSearchCategoryData where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCpSearchCategoryData where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCpSearchCategoryData where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCpSearchCategoryData where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCpSearchCategoryData where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCpSearchCategoryData whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCpSearchCategoryData whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
