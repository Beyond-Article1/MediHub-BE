/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Medihub;
import org.jooq.generated.tables.CaseSharingComment.CaseSharingCommentPath;
import org.jooq.generated.tables.CaseSharingGroup.CaseSharingGroupPath;
import org.jooq.generated.tables.Part.PartPath;
import org.jooq.generated.tables.Template.TemplatePath;
import org.jooq.generated.tables.User.UserPath;
import org.jooq.generated.tables.records.CaseSharingRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CaseSharing extends TableImpl<CaseSharingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>medihub.case_sharing</code>
     */
    public static final CaseSharing CASE_SHARING = new CaseSharing();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CaseSharingRecord> getRecordType() {
        return CaseSharingRecord.class;
    }

    /**
     * The column <code>medihub.case_sharing.case_sharing_seq</code>.
     */
    public final TableField<CaseSharingRecord, Long> CASE_SHARING_SEQ = createField(DSL.name("case_sharing_seq"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>medihub.case_sharing.created_at</code>.
     */
    public final TableField<CaseSharingRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>medihub.case_sharing.deleted_at</code>.
     */
    public final TableField<CaseSharingRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>medihub.case_sharing.case_sharing_content</code>.
     */
    public final TableField<CaseSharingRecord, String> CASE_SHARING_CONTENT = createField(DSL.name("case_sharing_content"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>medihub.case_sharing.case_sharing_is_draft</code>.
     */
    public final TableField<CaseSharingRecord, Boolean> CASE_SHARING_IS_DRAFT = createField(DSL.name("case_sharing_is_draft"), SQLDataType.BIT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIT)), this, "");

    /**
     * The column <code>medihub.case_sharing.case_sharing_is_latest</code>.
     */
    public final TableField<CaseSharingRecord, Boolean> CASE_SHARING_IS_LATEST = createField(DSL.name("case_sharing_is_latest"), SQLDataType.BIT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIT)), this, "");

    /**
     * The column <code>medihub.case_sharing.case_sharing_title</code>.
     */
    public final TableField<CaseSharingRecord, String> CASE_SHARING_TITLE = createField(DSL.name("case_sharing_title"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>medihub.case_sharing.case_sharing_view_count</code>.
     */
    public final TableField<CaseSharingRecord, Long> CASE_SHARING_VIEW_COUNT = createField(DSL.name("case_sharing_view_count"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>medihub.case_sharing.case_sharing_group_seq</code>.
     */
    public final TableField<CaseSharingRecord, Long> CASE_SHARING_GROUP_SEQ = createField(DSL.name("case_sharing_group_seq"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>medihub.case_sharing.part_seq</code>.
     */
    public final TableField<CaseSharingRecord, Long> PART_SEQ = createField(DSL.name("part_seq"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>medihub.case_sharing.template_seq</code>.
     */
    public final TableField<CaseSharingRecord, Long> TEMPLATE_SEQ = createField(DSL.name("template_seq"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>medihub.case_sharing.user_seq</code>.
     */
    public final TableField<CaseSharingRecord, Long> USER_SEQ = createField(DSL.name("user_seq"), SQLDataType.BIGINT.nullable(false), this, "");

    private CaseSharing(Name alias, Table<CaseSharingRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CaseSharing(Name alias, Table<CaseSharingRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>medihub.case_sharing</code> table reference
     */
    public CaseSharing(String alias) {
        this(DSL.name(alias), CASE_SHARING);
    }

    /**
     * Create an aliased <code>medihub.case_sharing</code> table reference
     */
    public CaseSharing(Name alias) {
        this(alias, CASE_SHARING);
    }

    /**
     * Create a <code>medihub.case_sharing</code> table reference
     */
    public CaseSharing() {
        this(DSL.name("case_sharing"), null);
    }

    public <O extends Record> CaseSharing(Table<O> path, ForeignKey<O, CaseSharingRecord> childPath, InverseForeignKey<O, CaseSharingRecord> parentPath) {
        super(path, childPath, parentPath, CASE_SHARING);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CaseSharingPath extends CaseSharing implements Path<CaseSharingRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CaseSharingPath(Table<O> path, ForeignKey<O, CaseSharingRecord> childPath, InverseForeignKey<O, CaseSharingRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CaseSharingPath(Name alias, Table<CaseSharingRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CaseSharingPath as(String alias) {
            return new CaseSharingPath(DSL.name(alias), this);
        }

        @Override
        public CaseSharingPath as(Name alias) {
            return new CaseSharingPath(alias, this);
        }

        @Override
        public CaseSharingPath as(Table<?> alias) {
            return new CaseSharingPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Medihub.MEDIHUB;
    }

    @Override
    public Identity<CaseSharingRecord, Long> getIdentity() {
        return (Identity<CaseSharingRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CaseSharingRecord> getPrimaryKey() {
        return Keys.KEY_CASE_SHARING_PRIMARY;
    }

    @Override
    public List<ForeignKey<CaseSharingRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK6I0YQPN0J36CBOS886NCI05FJ, Keys.FK7M2OX3YPINXH9ESPJWVTFTERI, Keys.FKKUNPU49SKX3XR8E8RBOUKW9KD, Keys.FKNE3TL9WBDYCGY68HPVH9F58O1);
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>medihub.user</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.FK6I0YQPN0J36CBOS886NCI05FJ, null);

        return _user;
    }

    private transient CaseSharingGroupPath _caseSharingGroup;

    /**
     * Get the implicit join path to the <code>medihub.case_sharing_group</code>
     * table.
     */
    public CaseSharingGroupPath caseSharingGroup() {
        if (_caseSharingGroup == null)
            _caseSharingGroup = new CaseSharingGroupPath(this, Keys.FK7M2OX3YPINXH9ESPJWVTFTERI, null);

        return _caseSharingGroup;
    }

    private transient TemplatePath _template;

    /**
     * Get the implicit join path to the <code>medihub.template</code> table.
     */
    public TemplatePath template() {
        if (_template == null)
            _template = new TemplatePath(this, Keys.FKKUNPU49SKX3XR8E8RBOUKW9KD, null);

        return _template;
    }

    private transient PartPath _part;

    /**
     * Get the implicit join path to the <code>medihub.part</code> table.
     */
    public PartPath part() {
        if (_part == null)
            _part = new PartPath(this, Keys.FKNE3TL9WBDYCGY68HPVH9F58O1, null);

        return _part;
    }

    private transient CaseSharingCommentPath _caseSharingComment;

    /**
     * Get the implicit to-many join path to the
     * <code>medihub.case_sharing_comment</code> table
     */
    public CaseSharingCommentPath caseSharingComment() {
        if (_caseSharingComment == null)
            _caseSharingComment = new CaseSharingCommentPath(this, null, Keys.FKGESKGLAJMW9KKSF82EBCODCQY.getInverseKey());

        return _caseSharingComment;
    }

    @Override
    public CaseSharing as(String alias) {
        return new CaseSharing(DSL.name(alias), this);
    }

    @Override
    public CaseSharing as(Name alias) {
        return new CaseSharing(alias, this);
    }

    @Override
    public CaseSharing as(Table<?> alias) {
        return new CaseSharing(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CaseSharing rename(String name) {
        return new CaseSharing(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CaseSharing rename(Name name) {
        return new CaseSharing(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CaseSharing rename(Table<?> name) {
        return new CaseSharing(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CaseSharing where(Condition condition) {
        return new CaseSharing(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CaseSharing where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CaseSharing where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CaseSharing where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CaseSharing where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CaseSharing where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CaseSharing where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CaseSharing where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CaseSharing whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CaseSharing whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
