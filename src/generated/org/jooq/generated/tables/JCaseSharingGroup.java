/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JMedihub;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JCaseSharing.CaseSharingPath;
import org.jooq.generated.tables.records.CaseSharingGroupRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCaseSharingGroup extends TableImpl<CaseSharingGroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>medihub.case_sharing_group</code>
     */
    public static final JCaseSharingGroup CASE_SHARING_GROUP = new JCaseSharingGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CaseSharingGroupRecord> getRecordType() {
        return CaseSharingGroupRecord.class;
    }

    /**
     * The column
     * <code>medihub.case_sharing_group.case_sharing_group_seq</code>.
     */
    public final TableField<CaseSharingGroupRecord, Long> CASE_SHARING_GROUP_SEQ = createField(DSL.name("case_sharing_group_seq"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>medihub.case_sharing_group.created_at</code>.
     */
    public final TableField<CaseSharingGroupRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>medihub.case_sharing_group.deleted_at</code>.
     */
    public final TableField<CaseSharingGroupRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>medihub.case_sharing_group.updated_at</code>.
     */
    public final TableField<CaseSharingGroupRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    private JCaseSharingGroup(Name alias, Table<CaseSharingGroupRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JCaseSharingGroup(Name alias, Table<CaseSharingGroupRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>medihub.case_sharing_group</code> table reference
     */
    public JCaseSharingGroup(String alias) {
        this(DSL.name(alias), CASE_SHARING_GROUP);
    }

    /**
     * Create an aliased <code>medihub.case_sharing_group</code> table reference
     */
    public JCaseSharingGroup(Name alias) {
        this(alias, CASE_SHARING_GROUP);
    }

    /**
     * Create a <code>medihub.case_sharing_group</code> table reference
     */
    public JCaseSharingGroup() {
        this(DSL.name("case_sharing_group"), null);
    }

    public <O extends Record> JCaseSharingGroup(Table<O> path, ForeignKey<O, CaseSharingGroupRecord> childPath, InverseForeignKey<O, CaseSharingGroupRecord> parentPath) {
        super(path, childPath, parentPath, CASE_SHARING_GROUP);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CaseSharingGroupPath extends JCaseSharingGroup implements Path<CaseSharingGroupRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CaseSharingGroupPath(Table<O> path, ForeignKey<O, CaseSharingGroupRecord> childPath, InverseForeignKey<O, CaseSharingGroupRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CaseSharingGroupPath(Name alias, Table<CaseSharingGroupRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CaseSharingGroupPath as(String alias) {
            return new CaseSharingGroupPath(DSL.name(alias), this);
        }

        @Override
        public CaseSharingGroupPath as(Name alias) {
            return new CaseSharingGroupPath(alias, this);
        }

        @Override
        public CaseSharingGroupPath as(Table<?> alias) {
            return new CaseSharingGroupPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMedihub.MEDIHUB;
    }

    @Override
    public Identity<CaseSharingGroupRecord, Long> getIdentity() {
        return (Identity<CaseSharingGroupRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CaseSharingGroupRecord> getPrimaryKey() {
        return Keys.KEY_CASE_SHARING_GROUP_PRIMARY;
    }

    private transient CaseSharingPath _caseSharing;

    /**
     * Get the implicit to-many join path to the
     * <code>medihub.case_sharing</code> table
     */
    public CaseSharingPath caseSharing() {
        if (_caseSharing == null)
            _caseSharing = new CaseSharingPath(this, null, Keys.FK7M2OX3YPINXH9ESPJWVTFTERI.getInverseKey());

        return _caseSharing;
    }

    @Override
    public JCaseSharingGroup as(String alias) {
        return new JCaseSharingGroup(DSL.name(alias), this);
    }

    @Override
    public JCaseSharingGroup as(Name alias) {
        return new JCaseSharingGroup(alias, this);
    }

    @Override
    public JCaseSharingGroup as(Table<?> alias) {
        return new JCaseSharingGroup(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JCaseSharingGroup rename(String name) {
        return new JCaseSharingGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCaseSharingGroup rename(Name name) {
        return new JCaseSharingGroup(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCaseSharingGroup rename(Table<?> name) {
        return new JCaseSharingGroup(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCaseSharingGroup where(Condition condition) {
        return new JCaseSharingGroup(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCaseSharingGroup where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCaseSharingGroup where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCaseSharingGroup where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCaseSharingGroup where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCaseSharingGroup where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCaseSharingGroup where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCaseSharingGroup where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCaseSharingGroup whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCaseSharingGroup whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
