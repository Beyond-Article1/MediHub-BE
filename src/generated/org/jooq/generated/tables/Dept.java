/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Medihub;
import org.jooq.generated.tables.Part.PartPath;
import org.jooq.generated.tables.records.DeptRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dept extends TableImpl<DeptRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>medihub.dept</code>
     */
    public static final Dept DEPT = new Dept();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DeptRecord> getRecordType() {
        return DeptRecord.class;
    }

    /**
     * The column <code>medihub.dept.dept_seq</code>.
     */
    public final TableField<DeptRecord, Long> DEPT_SEQ = createField(DSL.name("dept_seq"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>medihub.dept.dept_name</code>.
     */
    public final TableField<DeptRecord, String> DEPT_NAME = createField(DSL.name("dept_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Dept(Name alias, Table<DeptRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Dept(Name alias, Table<DeptRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>medihub.dept</code> table reference
     */
    public Dept(String alias) {
        this(DSL.name(alias), DEPT);
    }

    /**
     * Create an aliased <code>medihub.dept</code> table reference
     */
    public Dept(Name alias) {
        this(alias, DEPT);
    }

    /**
     * Create a <code>medihub.dept</code> table reference
     */
    public Dept() {
        this(DSL.name("dept"), null);
    }

    public <O extends Record> Dept(Table<O> path, ForeignKey<O, DeptRecord> childPath, InverseForeignKey<O, DeptRecord> parentPath) {
        super(path, childPath, parentPath, DEPT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DeptPath extends Dept implements Path<DeptRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> DeptPath(Table<O> path, ForeignKey<O, DeptRecord> childPath, InverseForeignKey<O, DeptRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DeptPath(Name alias, Table<DeptRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DeptPath as(String alias) {
            return new DeptPath(DSL.name(alias), this);
        }

        @Override
        public DeptPath as(Name alias) {
            return new DeptPath(alias, this);
        }

        @Override
        public DeptPath as(Table<?> alias) {
            return new DeptPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Medihub.MEDIHUB;
    }

    @Override
    public Identity<DeptRecord, Long> getIdentity() {
        return (Identity<DeptRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DeptRecord> getPrimaryKey() {
        return Keys.KEY_DEPT_PRIMARY;
    }

    private transient PartPath _part;

    /**
     * Get the implicit to-many join path to the <code>medihub.part</code> table
     */
    public PartPath part() {
        if (_part == null)
            _part = new PartPath(this, null, Keys.FK2EOOGX1T34AWD7KBJCL88TVJ0.getInverseKey());

        return _part;
    }

    @Override
    public Dept as(String alias) {
        return new Dept(DSL.name(alias), this);
    }

    @Override
    public Dept as(Name alias) {
        return new Dept(alias, this);
    }

    @Override
    public Dept as(Table<?> alias) {
        return new Dept(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dept rename(String name) {
        return new Dept(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dept rename(Name name) {
        return new Dept(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dept rename(Table<?> name) {
        return new Dept(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Dept where(Condition condition) {
        return new Dept(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Dept where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Dept where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Dept where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Dept where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Dept where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Dept where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Dept where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Dept whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Dept whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
