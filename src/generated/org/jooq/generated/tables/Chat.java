/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Medihub;
import org.jooq.generated.tables.Chatroom.ChatroomPath;
import org.jooq.generated.tables.User.UserPath;
import org.jooq.generated.tables.records.ChatRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Chat extends TableImpl<ChatRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>medihub.chat</code>
     */
    public static final Chat CHAT = new Chat();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChatRecord> getRecordType() {
        return ChatRecord.class;
    }

    /**
     * The column <code>medihub.chat.chat_seq</code>.
     */
    public final TableField<ChatRecord, Long> CHAT_SEQ = createField(DSL.name("chat_seq"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>medihub.chat.chatroom_custom_name</code>.
     */
    public final TableField<ChatRecord, String> CHATROOM_CUSTOM_NAME = createField(DSL.name("chatroom_custom_name"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>medihub.chat.joined_at</code>.
     */
    public final TableField<ChatRecord, LocalDateTime> JOINED_AT = createField(DSL.name("joined_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>medihub.chat.chatroom_seq</code>.
     */
    public final TableField<ChatRecord, Long> CHATROOM_SEQ = createField(DSL.name("chatroom_seq"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>medihub.chat.user_seq</code>.
     */
    public final TableField<ChatRecord, Long> USER_SEQ = createField(DSL.name("user_seq"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>medihub.chat.last_visited_at</code>.
     */
    public final TableField<ChatRecord, LocalDateTime> LAST_VISITED_AT = createField(DSL.name("last_visited_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    private Chat(Name alias, Table<ChatRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Chat(Name alias, Table<ChatRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>medihub.chat</code> table reference
     */
    public Chat(String alias) {
        this(DSL.name(alias), CHAT);
    }

    /**
     * Create an aliased <code>medihub.chat</code> table reference
     */
    public Chat(Name alias) {
        this(alias, CHAT);
    }

    /**
     * Create a <code>medihub.chat</code> table reference
     */
    public Chat() {
        this(DSL.name("chat"), null);
    }

    public <O extends Record> Chat(Table<O> path, ForeignKey<O, ChatRecord> childPath, InverseForeignKey<O, ChatRecord> parentPath) {
        super(path, childPath, parentPath, CHAT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ChatPath extends Chat implements Path<ChatRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ChatPath(Table<O> path, ForeignKey<O, ChatRecord> childPath, InverseForeignKey<O, ChatRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ChatPath(Name alias, Table<ChatRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ChatPath as(String alias) {
            return new ChatPath(DSL.name(alias), this);
        }

        @Override
        public ChatPath as(Name alias) {
            return new ChatPath(alias, this);
        }

        @Override
        public ChatPath as(Table<?> alias) {
            return new ChatPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Medihub.MEDIHUB;
    }

    @Override
    public Identity<ChatRecord, Long> getIdentity() {
        return (Identity<ChatRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChatRecord> getPrimaryKey() {
        return Keys.KEY_CHAT_PRIMARY;
    }

    @Override
    public List<ForeignKey<ChatRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK53X2GHIO91G1T1AFMGXM1VCE8, Keys.FKS2MTMSBS4FN42FLQEGGUXLHUM);
    }

    private transient ChatroomPath _chatroom;

    /**
     * Get the implicit join path to the <code>medihub.chatroom</code> table.
     */
    public ChatroomPath chatroom() {
        if (_chatroom == null)
            _chatroom = new ChatroomPath(this, Keys.FK53X2GHIO91G1T1AFMGXM1VCE8, null);

        return _chatroom;
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>medihub.user</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.FKS2MTMSBS4FN42FLQEGGUXLHUM, null);

        return _user;
    }

    @Override
    public Chat as(String alias) {
        return new Chat(DSL.name(alias), this);
    }

    @Override
    public Chat as(Name alias) {
        return new Chat(alias, this);
    }

    @Override
    public Chat as(Table<?> alias) {
        return new Chat(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Chat rename(String name) {
        return new Chat(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Chat rename(Name name) {
        return new Chat(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Chat rename(Table<?> name) {
        return new Chat(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chat where(Condition condition) {
        return new Chat(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chat where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chat where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chat where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Chat where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Chat where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Chat where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Chat where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chat whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chat whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
