/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.Cp;
import org.jooq.generated.tables.records.CpRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CpDao extends DAOImpl<CpRecord, org.jooq.generated.tables.pojos.Cp, Long> {

    /**
     * Create a new CpDao without any configuration
     */
    public CpDao() {
        super(Cp.CP, org.jooq.generated.tables.pojos.Cp.class);
    }

    /**
     * Create a new CpDao with an attached configuration
     */
    public CpDao(Configuration configuration) {
        super(Cp.CP, org.jooq.generated.tables.pojos.Cp.class, configuration);
    }

    @Override
    public Long getId(org.jooq.generated.tables.pojos.Cp object) {
        return object.getCpSeq();
    }

    /**
     * Fetch records that have <code>cp_seq BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Cp> fetchRangeOfCpSeq(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Cp.CP.CP_SEQ, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cp_seq IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Cp> fetchByCpSeq(Long... values) {
        return fetch(Cp.CP.CP_SEQ, values);
    }

    /**
     * Fetch a unique record that has <code>cp_seq = value</code>
     */
    public org.jooq.generated.tables.pojos.Cp fetchOneByCpSeq(Long value) {
        return fetchOne(Cp.CP.CP_SEQ, value);
    }

    /**
     * Fetch a unique record that has <code>cp_seq = value</code>
     */
    public Optional<org.jooq.generated.tables.pojos.Cp> fetchOptionalByCpSeq(Long value) {
        return fetchOptional(Cp.CP.CP_SEQ, value);
    }

    /**
     * Fetch records that have <code>cp_description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Cp> fetchRangeOfCpDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cp.CP.CP_DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cp_description IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Cp> fetchByCpDescription(String... values) {
        return fetch(Cp.CP.CP_DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>cp_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Cp> fetchRangeOfCpName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cp.CP.CP_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cp_name IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Cp> fetchByCpName(String... values) {
        return fetch(Cp.CP.CP_NAME, values);
    }

    /**
     * Fetch records that have <code>cp_view_count BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Cp> fetchRangeOfCpViewCount(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Cp.CP.CP_VIEW_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cp_view_count IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Cp> fetchByCpViewCount(Long... values) {
        return fetch(Cp.CP.CP_VIEW_COUNT, values);
    }

    /**
     * Fetch records that have <code>user_seq BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Cp> fetchRangeOfUserSeq(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Cp.CP.USER_SEQ, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_seq IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Cp> fetchByUserSeq(Long... values) {
        return fetch(Cp.CP.USER_SEQ, values);
    }
}
