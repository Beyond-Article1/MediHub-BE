/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.enums.UserUserAuth;
import org.jooq.generated.enums.UserUserStatus;
import org.jooq.generated.tables.JUser;
import org.jooq.generated.tables.pojos.User;
import org.jooq.generated.tables.records.UserRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDao extends DAOImpl<UserRecord, User, Long> {

    /**
     * Create a new UserDao without any configuration
     */
    public UserDao() {
        super(JUser.USER, User.class);
    }

    /**
     * Create a new UserDao with an attached configuration
     */
    public UserDao(Configuration configuration) {
        super(JUser.USER, User.class, configuration);
    }

    @Override
    public Long getId(User object) {
        return object.getUserSeq();
    }

    /**
     * Fetch records that have <code>user_seq BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJUserSeq(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JUser.USER.USER_SEQ, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_seq IN (values)</code>
     */
    public List<User> fetchByJUserSeq(Long... values) {
        return fetch(JUser.USER.USER_SEQ, values);
    }

    /**
     * Fetch a unique record that has <code>user_seq = value</code>
     */
    public User fetchOneByJUserSeq(Long value) {
        return fetchOne(JUser.USER.USER_SEQ, value);
    }

    /**
     * Fetch a unique record that has <code>user_seq = value</code>
     */
    public Optional<User> fetchOptionalByJUserSeq(Long value) {
        return fetchOptional(JUser.USER.USER_SEQ, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JUser.USER.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<User> fetchByJCreatedAt(LocalDateTime... values) {
        return fetch(JUser.USER.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>deleted_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJDeletedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JUser.USER.DELETED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>deleted_at IN (values)</code>
     */
    public List<User> fetchByJDeletedAt(LocalDateTime... values) {
        return fetch(JUser.USER.DELETED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JUser.USER.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<User> fetchByJUpdatedAt(LocalDateTime... values) {
        return fetch(JUser.USER.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>user_auth BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJUserAuth(UserUserAuth lowerInclusive, UserUserAuth upperInclusive) {
        return fetchRange(JUser.USER.USER_AUTH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_auth IN (values)</code>
     */
    public List<User> fetchByJUserAuth(UserUserAuth... values) {
        return fetch(JUser.USER.USER_AUTH, values);
    }

    /**
     * Fetch records that have <code>user_email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJUserEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUser.USER.USER_EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_email IN (values)</code>
     */
    public List<User> fetchByJUserEmail(String... values) {
        return fetch(JUser.USER.USER_EMAIL, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJUserId(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUser.USER.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<User> fetchByJUserId(String... values) {
        return fetch(JUser.USER.USER_ID, values);
    }

    /**
     * Fetch a unique record that has <code>user_id = value</code>
     */
    public User fetchOneByJUserId(String value) {
        return fetchOne(JUser.USER.USER_ID, value);
    }

    /**
     * Fetch a unique record that has <code>user_id = value</code>
     */
    public Optional<User> fetchOptionalByJUserId(String value) {
        return fetchOptional(JUser.USER.USER_ID, value);
    }

    /**
     * Fetch records that have <code>user_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJUserName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUser.USER.USER_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_name IN (values)</code>
     */
    public List<User> fetchByJUserName(String... values) {
        return fetch(JUser.USER.USER_NAME, values);
    }

    /**
     * Fetch records that have <code>user_password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJUserPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUser.USER.USER_PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_password IN (values)</code>
     */
    public List<User> fetchByJUserPassword(String... values) {
        return fetch(JUser.USER.USER_PASSWORD, values);
    }

    /**
     * Fetch records that have <code>user_phone BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJUserPhone(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUser.USER.USER_PHONE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_phone IN (values)</code>
     */
    public List<User> fetchByJUserPhone(String... values) {
        return fetch(JUser.USER.USER_PHONE, values);
    }

    /**
     * Fetch records that have <code>user_status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJUserStatus(UserUserStatus lowerInclusive, UserUserStatus upperInclusive) {
        return fetchRange(JUser.USER.USER_STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_status IN (values)</code>
     */
    public List<User> fetchByJUserStatus(UserUserStatus... values) {
        return fetch(JUser.USER.USER_STATUS, values);
    }

    /**
     * Fetch records that have <code>part_seq BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJPartSeq(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JUser.USER.PART_SEQ, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>part_seq IN (values)</code>
     */
    public List<User> fetchByJPartSeq(Long... values) {
        return fetch(JUser.USER.PART_SEQ, values);
    }

    /**
     * Fetch records that have <code>ranking_seq BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJRankingSeq(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JUser.USER.RANKING_SEQ, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ranking_seq IN (values)</code>
     */
    public List<User> fetchByJRankingSeq(Long... values) {
        return fetch(JUser.USER.RANKING_SEQ, values);
    }
}
