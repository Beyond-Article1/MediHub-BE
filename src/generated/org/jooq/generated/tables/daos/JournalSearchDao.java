/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JJournalSearch;
import org.jooq.generated.tables.pojos.JournalSearch;
import org.jooq.generated.tables.records.JournalSearchRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JournalSearchDao extends DAOImpl<JournalSearchRecord, JournalSearch, Long> {

    /**
     * Create a new JournalSearchDao without any configuration
     */
    public JournalSearchDao() {
        super(JJournalSearch.JOURNAL_SEARCH, JournalSearch.class);
    }

    /**
     * Create a new JournalSearchDao with an attached configuration
     */
    public JournalSearchDao(Configuration configuration) {
        super(JJournalSearch.JOURNAL_SEARCH, JournalSearch.class, configuration);
    }

    @Override
    public Long getId(JournalSearch object) {
        return object.getJournalSearchSeq();
    }

    /**
     * Fetch records that have <code>journal_search_seq BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<JournalSearch> fetchRangeOfJJournalSearchSeq(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JJournalSearch.JOURNAL_SEARCH.JOURNAL_SEARCH_SEQ, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_search_seq IN (values)</code>
     */
    public List<JournalSearch> fetchByJJournalSearchSeq(Long... values) {
        return fetch(JJournalSearch.JOURNAL_SEARCH.JOURNAL_SEARCH_SEQ, values);
    }

    /**
     * Fetch a unique record that has <code>journal_search_seq = value</code>
     */
    public JournalSearch fetchOneByJJournalSearchSeq(Long value) {
        return fetchOne(JJournalSearch.JOURNAL_SEARCH.JOURNAL_SEARCH_SEQ, value);
    }

    /**
     * Fetch a unique record that has <code>journal_search_seq = value</code>
     */
    public Optional<JournalSearch> fetchOptionalByJJournalSearchSeq(Long value) {
        return fetchOptional(JJournalSearch.JOURNAL_SEARCH.JOURNAL_SEARCH_SEQ, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JournalSearch> fetchRangeOfJCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JJournalSearch.JOURNAL_SEARCH.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<JournalSearch> fetchByJCreatedAt(LocalDateTime... values) {
        return fetch(JJournalSearch.JOURNAL_SEARCH.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JournalSearch> fetchRangeOfJUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JJournalSearch.JOURNAL_SEARCH.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<JournalSearch> fetchByJUpdatedAt(LocalDateTime... values) {
        return fetch(JJournalSearch.JOURNAL_SEARCH.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>journal_seq BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JournalSearch> fetchRangeOfJJournalSeq(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JJournalSearch.JOURNAL_SEARCH.JOURNAL_SEQ, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_seq IN (values)</code>
     */
    public List<JournalSearch> fetchByJJournalSeq(Long... values) {
        return fetch(JJournalSearch.JOURNAL_SEARCH.JOURNAL_SEQ, values);
    }

    /**
     * Fetch records that have <code>user_seq BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JournalSearch> fetchRangeOfJUserSeq(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JJournalSearch.JOURNAL_SEARCH.USER_SEQ, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_seq IN (values)</code>
     */
    public List<JournalSearch> fetchByJUserSeq(Long... values) {
        return fetch(JJournalSearch.JOURNAL_SEARCH.USER_SEQ, values);
    }
}
