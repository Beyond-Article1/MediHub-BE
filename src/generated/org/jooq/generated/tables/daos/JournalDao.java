/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.Journal;
import org.jooq.generated.tables.records.JournalRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JournalDao extends DAOImpl<JournalRecord, org.jooq.generated.tables.pojos.Journal, Long> {

    /**
     * Create a new JournalDao without any configuration
     */
    public JournalDao() {
        super(Journal.JOURNAL, org.jooq.generated.tables.pojos.Journal.class);
    }

    /**
     * Create a new JournalDao with an attached configuration
     */
    public JournalDao(Configuration configuration) {
        super(Journal.JOURNAL, org.jooq.generated.tables.pojos.Journal.class, configuration);
    }

    @Override
    public Long getId(org.jooq.generated.tables.pojos.Journal object) {
        return object.getJournalSeq();
    }

    /**
     * Fetch records that have <code>journal_seq BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Journal> fetchRangeOfJournalSeq(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Journal.JOURNAL.JOURNAL_SEQ, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_seq IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Journal> fetchByJournalSeq(Long... values) {
        return fetch(Journal.JOURNAL.JOURNAL_SEQ, values);
    }

    /**
     * Fetch a unique record that has <code>journal_seq = value</code>
     */
    public org.jooq.generated.tables.pojos.Journal fetchOneByJournalSeq(Long value) {
        return fetchOne(Journal.JOURNAL.JOURNAL_SEQ, value);
    }

    /**
     * Fetch a unique record that has <code>journal_seq = value</code>
     */
    public Optional<org.jooq.generated.tables.pojos.Journal> fetchOptionalByJournalSeq(Long value) {
        return fetchOptional(Journal.JOURNAL.JOURNAL_SEQ, value);
    }

    /**
     * Fetch records that have <code>journal_authors BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Journal> fetchRangeOfJournalAuthors(String lowerInclusive, String upperInclusive) {
        return fetchRange(Journal.JOURNAL.JOURNAL_AUTHORS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_authors IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Journal> fetchByJournalAuthors(String... values) {
        return fetch(Journal.JOURNAL.JOURNAL_AUTHORS, values);
    }

    /**
     * Fetch records that have <code>journal_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Journal> fetchRangeOfJournalDate(String lowerInclusive, String upperInclusive) {
        return fetchRange(Journal.JOURNAL.JOURNAL_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_date IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Journal> fetchByJournalDate(String... values) {
        return fetch(Journal.JOURNAL.JOURNAL_DATE, values);
    }

    /**
     * Fetch records that have <code>journal_doi BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Journal> fetchRangeOfJournalDoi(String lowerInclusive, String upperInclusive) {
        return fetchRange(Journal.JOURNAL.JOURNAL_DOI, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_doi IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Journal> fetchByJournalDoi(String... values) {
        return fetch(Journal.JOURNAL.JOURNAL_DOI, values);
    }

    /**
     * Fetch a unique record that has <code>journal_doi = value</code>
     */
    public org.jooq.generated.tables.pojos.Journal fetchOneByJournalDoi(String value) {
        return fetchOne(Journal.JOURNAL.JOURNAL_DOI, value);
    }

    /**
     * Fetch a unique record that has <code>journal_doi = value</code>
     */
    public Optional<org.jooq.generated.tables.pojos.Journal> fetchOptionalByJournalDoi(String value) {
        return fetchOptional(Journal.JOURNAL.JOURNAL_DOI, value);
    }

    /**
     * Fetch records that have <code>journal_journal BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Journal> fetchRangeOfJournalJournal(String lowerInclusive, String upperInclusive) {
        return fetchRange(Journal.JOURNAL.JOURNAL_JOURNAL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_journal IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Journal> fetchByJournalJournal(String... values) {
        return fetch(Journal.JOURNAL.JOURNAL_JOURNAL, values);
    }

    /**
     * Fetch records that have <code>journal_korean_title BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Journal> fetchRangeOfJournalKoreanTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Journal.JOURNAL.JOURNAL_KOREAN_TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_korean_title IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Journal> fetchByJournalKoreanTitle(String... values) {
        return fetch(Journal.JOURNAL.JOURNAL_KOREAN_TITLE, values);
    }

    /**
     * Fetch records that have <code>journal_pmid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Journal> fetchRangeOfJournalPmid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Journal.JOURNAL.JOURNAL_PMID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_pmid IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Journal> fetchByJournalPmid(String... values) {
        return fetch(Journal.JOURNAL.JOURNAL_PMID, values);
    }

    /**
     * Fetch a unique record that has <code>journal_pmid = value</code>
     */
    public org.jooq.generated.tables.pojos.Journal fetchOneByJournalPmid(String value) {
        return fetchOne(Journal.JOURNAL.JOURNAL_PMID, value);
    }

    /**
     * Fetch a unique record that has <code>journal_pmid = value</code>
     */
    public Optional<org.jooq.generated.tables.pojos.Journal> fetchOptionalByJournalPmid(String value) {
        return fetchOptional(Journal.JOURNAL.JOURNAL_PMID, value);
    }

    /**
     * Fetch records that have <code>journal_size BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Journal> fetchRangeOfJournalSize(String lowerInclusive, String upperInclusive) {
        return fetchRange(Journal.JOURNAL.JOURNAL_SIZE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_size IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Journal> fetchByJournalSize(String... values) {
        return fetch(Journal.JOURNAL.JOURNAL_SIZE, values);
    }

    /**
     * Fetch records that have <code>journal_title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Journal> fetchRangeOfJournalTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Journal.JOURNAL.JOURNAL_TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_title IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Journal> fetchByJournalTitle(String... values) {
        return fetch(Journal.JOURNAL.JOURNAL_TITLE, values);
    }

    /**
     * Fetch a unique record that has <code>journal_title = value</code>
     */
    public org.jooq.generated.tables.pojos.Journal fetchOneByJournalTitle(String value) {
        return fetchOne(Journal.JOURNAL.JOURNAL_TITLE, value);
    }

    /**
     * Fetch a unique record that has <code>journal_title = value</code>
     */
    public Optional<org.jooq.generated.tables.pojos.Journal> fetchOptionalByJournalTitle(String value) {
        return fetchOptional(Journal.JOURNAL.JOURNAL_TITLE, value);
    }
}
