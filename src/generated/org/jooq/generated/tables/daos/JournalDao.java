/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JJournal;
import org.jooq.generated.tables.pojos.Journal;
import org.jooq.generated.tables.records.JournalRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JournalDao extends DAOImpl<JournalRecord, Journal, Long> {

    /**
     * Create a new JournalDao without any configuration
     */
    public JournalDao() {
        super(JJournal.JOURNAL, Journal.class);
    }

    /**
     * Create a new JournalDao with an attached configuration
     */
    public JournalDao(Configuration configuration) {
        super(JJournal.JOURNAL, Journal.class, configuration);
    }

    @Override
    public Long getId(Journal object) {
        return object.getJournalSeq();
    }

    /**
     * Fetch records that have <code>journal_seq BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Journal> fetchRangeOfJJournalSeq(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JJournal.JOURNAL.JOURNAL_SEQ, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_seq IN (values)</code>
     */
    public List<Journal> fetchByJJournalSeq(Long... values) {
        return fetch(JJournal.JOURNAL.JOURNAL_SEQ, values);
    }

    /**
     * Fetch a unique record that has <code>journal_seq = value</code>
     */
    public Journal fetchOneByJJournalSeq(Long value) {
        return fetchOne(JJournal.JOURNAL.JOURNAL_SEQ, value);
    }

    /**
     * Fetch a unique record that has <code>journal_seq = value</code>
     */
    public Optional<Journal> fetchOptionalByJJournalSeq(Long value) {
        return fetchOptional(JJournal.JOURNAL.JOURNAL_SEQ, value);
    }

    /**
     * Fetch records that have <code>journal_authors BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Journal> fetchRangeOfJJournalAuthors(String lowerInclusive, String upperInclusive) {
        return fetchRange(JJournal.JOURNAL.JOURNAL_AUTHORS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_authors IN (values)</code>
     */
    public List<Journal> fetchByJJournalAuthors(String... values) {
        return fetch(JJournal.JOURNAL.JOURNAL_AUTHORS, values);
    }

    /**
     * Fetch records that have <code>journal_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Journal> fetchRangeOfJJournalDate(String lowerInclusive, String upperInclusive) {
        return fetchRange(JJournal.JOURNAL.JOURNAL_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_date IN (values)</code>
     */
    public List<Journal> fetchByJJournalDate(String... values) {
        return fetch(JJournal.JOURNAL.JOURNAL_DATE, values);
    }

    /**
     * Fetch records that have <code>journal_doi BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Journal> fetchRangeOfJJournalDoi(String lowerInclusive, String upperInclusive) {
        return fetchRange(JJournal.JOURNAL.JOURNAL_DOI, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_doi IN (values)</code>
     */
    public List<Journal> fetchByJJournalDoi(String... values) {
        return fetch(JJournal.JOURNAL.JOURNAL_DOI, values);
    }

    /**
     * Fetch a unique record that has <code>journal_doi = value</code>
     */
    public Journal fetchOneByJJournalDoi(String value) {
        return fetchOne(JJournal.JOURNAL.JOURNAL_DOI, value);
    }

    /**
     * Fetch a unique record that has <code>journal_doi = value</code>
     */
    public Optional<Journal> fetchOptionalByJJournalDoi(String value) {
        return fetchOptional(JJournal.JOURNAL.JOURNAL_DOI, value);
    }

    /**
     * Fetch records that have <code>journal_journal BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Journal> fetchRangeOfJJournalJournal(String lowerInclusive, String upperInclusive) {
        return fetchRange(JJournal.JOURNAL.JOURNAL_JOURNAL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_journal IN (values)</code>
     */
    public List<Journal> fetchByJJournalJournal(String... values) {
        return fetch(JJournal.JOURNAL.JOURNAL_JOURNAL, values);
    }

    /**
     * Fetch records that have <code>journal_korean_title BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<Journal> fetchRangeOfJJournalKoreanTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(JJournal.JOURNAL.JOURNAL_KOREAN_TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_korean_title IN (values)</code>
     */
    public List<Journal> fetchByJJournalKoreanTitle(String... values) {
        return fetch(JJournal.JOURNAL.JOURNAL_KOREAN_TITLE, values);
    }

    /**
     * Fetch records that have <code>journal_pmid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Journal> fetchRangeOfJJournalPmid(String lowerInclusive, String upperInclusive) {
        return fetchRange(JJournal.JOURNAL.JOURNAL_PMID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_pmid IN (values)</code>
     */
    public List<Journal> fetchByJJournalPmid(String... values) {
        return fetch(JJournal.JOURNAL.JOURNAL_PMID, values);
    }

    /**
     * Fetch a unique record that has <code>journal_pmid = value</code>
     */
    public Journal fetchOneByJJournalPmid(String value) {
        return fetchOne(JJournal.JOURNAL.JOURNAL_PMID, value);
    }

    /**
     * Fetch a unique record that has <code>journal_pmid = value</code>
     */
    public Optional<Journal> fetchOptionalByJJournalPmid(String value) {
        return fetchOptional(JJournal.JOURNAL.JOURNAL_PMID, value);
    }

    /**
     * Fetch records that have <code>journal_size BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Journal> fetchRangeOfJJournalSize(String lowerInclusive, String upperInclusive) {
        return fetchRange(JJournal.JOURNAL.JOURNAL_SIZE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_size IN (values)</code>
     */
    public List<Journal> fetchByJJournalSize(String... values) {
        return fetch(JJournal.JOURNAL.JOURNAL_SIZE, values);
    }

    /**
     * Fetch records that have <code>journal_title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Journal> fetchRangeOfJJournalTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(JJournal.JOURNAL.JOURNAL_TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>journal_title IN (values)</code>
     */
    public List<Journal> fetchByJJournalTitle(String... values) {
        return fetch(JJournal.JOURNAL.JOURNAL_TITLE, values);
    }

    /**
     * Fetch a unique record that has <code>journal_title = value</code>
     */
    public Journal fetchOneByJJournalTitle(String value) {
        return fetchOne(JJournal.JOURNAL.JOURNAL_TITLE, value);
    }

    /**
     * Fetch a unique record that has <code>journal_title = value</code>
     */
    public Optional<Journal> fetchOptionalByJJournalTitle(String value) {
        return fetchOptional(JJournal.JOURNAL.JOURNAL_TITLE, value);
    }
}
