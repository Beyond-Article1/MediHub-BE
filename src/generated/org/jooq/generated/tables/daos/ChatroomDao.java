/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JChatroom;
import org.jooq.generated.tables.pojos.Chatroom;
import org.jooq.generated.tables.records.ChatroomRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChatroomDao extends DAOImpl<ChatroomRecord, Chatroom, Long> {

    /**
     * Create a new ChatroomDao without any configuration
     */
    public ChatroomDao() {
        super(JChatroom.CHATROOM, Chatroom.class);
    }

    /**
     * Create a new ChatroomDao with an attached configuration
     */
    public ChatroomDao(Configuration configuration) {
        super(JChatroom.CHATROOM, Chatroom.class, configuration);
    }

    @Override
    public Long getId(Chatroom object) {
        return object.getChatroomSeq();
    }

    /**
     * Fetch records that have <code>chatroom_seq BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Chatroom> fetchRangeOfJChatroomSeq(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JChatroom.CHATROOM.CHATROOM_SEQ, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>chatroom_seq IN (values)</code>
     */
    public List<Chatroom> fetchByJChatroomSeq(Long... values) {
        return fetch(JChatroom.CHATROOM.CHATROOM_SEQ, values);
    }

    /**
     * Fetch a unique record that has <code>chatroom_seq = value</code>
     */
    public Chatroom fetchOneByJChatroomSeq(Long value) {
        return fetchOne(JChatroom.CHATROOM.CHATROOM_SEQ, value);
    }

    /**
     * Fetch a unique record that has <code>chatroom_seq = value</code>
     */
    public Optional<Chatroom> fetchOptionalByJChatroomSeq(Long value) {
        return fetchOptional(JChatroom.CHATROOM.CHATROOM_SEQ, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Chatroom> fetchRangeOfJCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JChatroom.CHATROOM.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<Chatroom> fetchByJCreatedAt(LocalDateTime... values) {
        return fetch(JChatroom.CHATROOM.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>deleted_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Chatroom> fetchRangeOfJDeletedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JChatroom.CHATROOM.DELETED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>deleted_at IN (values)</code>
     */
    public List<Chatroom> fetchByJDeletedAt(LocalDateTime... values) {
        return fetch(JChatroom.CHATROOM.DELETED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Chatroom> fetchRangeOfJUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JChatroom.CHATROOM.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<Chatroom> fetchByJUpdatedAt(LocalDateTime... values) {
        return fetch(JChatroom.CHATROOM.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>chatroom_default_name BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<Chatroom> fetchRangeOfJChatroomDefaultName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JChatroom.CHATROOM.CHATROOM_DEFAULT_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>chatroom_default_name IN (values)</code>
     */
    public List<Chatroom> fetchByJChatroomDefaultName(String... values) {
        return fetch(JChatroom.CHATROOM.CHATROOM_DEFAULT_NAME, values);
    }
}
