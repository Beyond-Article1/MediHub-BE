buildscript {
    ext {
        jooqVersion = '3.19.14'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.google.cloud.tools.jib' version '3.3.2'         // Jib 플러그인
    id 'jacoco'                                             // jacoco 생성
    id 'nu.studer.jooq' version '9.0'                       // jOOQ 플러그인
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // WebSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // MongoDB
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    // Kafka
    implementation 'org.springframework.kafka:spring-kafka'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // MockMvc와 REST 테스트를 위한 의존성
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework:spring-test'

    // JSON 테스트 지원 (예: 응답 JSON 검증)
    testImplementation 'com.jayway.jsonpath:json-path:2.8.0'

    // Mockito: 서비스 계층 테스트를 위한 Mocking 라이브러리
    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'

    // AssertJ: Fluent 스타일로 테스트를 작성
    testImplementation 'org.assertj:assertj-core:3.24.2'

    // Env 설정
    implementation 'io.github.cdimascio:java-dotenv:5.2.2'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // WebClient를 위한 의존성 (webFlux)
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // XML 파싱 Jsoup
    implementation group: 'org.jsoup', name: 'jsoup', version: '1.18.3'

    // AWS S3를 위한 의존성
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // Elasticsearch를 위한 의존성
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.1.1'
    implementation 'org.codehaus.janino:janino:3.1.12'

    //챗봇
    implementation 'org.apache.lucene:lucene-core:9.11.1'

    // jOOQ
    jooqGenerator project(':jOOQ-custom')
    jooqGenerator "org.jooq:jooq:${jooqVersion}"
    jooqGenerator "org.jooq:jooq-meta:${jooqVersion}"
}

//// .env 파일 로드
//def loadEnv() {
//    def envFile = file('.env')
//    if (envFile.exists()) {
//        envFile.eachLine { line ->
//            def (key, value) = line.split('=', 2)
//            if (key && value) {
//                project.ext.set(key.trim(), value.trim())
//            }
//        }
//    }
//}
//
//// .env 파일 읽기
//loadEnv()

//jib {
//    from {
//        image = 'openjdk:17.0.2-slim' // 베이스 이미지 지정
//    }
//    to {
//        image = "${project.ext.get('DOCKER_USERNAME') ?: 'default-user'}/medihub" // .env 파일에서 DOCKER_USERNAME 사용
//        auth {
//            username = project.ext.get('DOCKER_USERNAME') ?: 'default-user'
//            password = project.ext.get('DOCKER_PASSWORD') ?: 'default-password'
//        }
//    }
//    container {
//        ports = ['8088'] // 컨테이너 포트
//        jvmFlags = ["-Xms512m", "-Xmx512m"]
//        creationTime = "USE_CURRENT_TIMESTAMP"
//    }
//}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    dependsOn test // 리포트 생성 전에 test를 반드시 수행

    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, excludes: [
                '**/*Application*',
                '**/exception/**',
                '**/config/**',
                '**/dto/**',
                '**/s3/**',
                '**/security/**',
                '**/util/*JwtUtil*',
                '**/*Builder*',
                '**/entity/**',
                '**/component/**',
                '**/response/**',
                '**/*PasswordEncryptor*',
                '**/elasticsearch/**',
                '**/*KafkaConstants*',
                '**/*Handler*',
                '**/*ViewCountManager*',
                '**/*jooq*/**',
                '**/repository/**',

        ])
    }))
    reports {
        xml.required.set(true) // xml 리포트를 활성화
        html.required.set(true) // html 리포트를 비활성화
        xml.destination file("${project.layout.buildDirectory.get().asFile}/reports/jacoco/test/jacocoTestReport.xml")
        // XML 리포트 경로
        html.destination file("${project.layout.buildDirectory.get().asFile}/jacocoReport/test/html")  // HTML 리포트 경로
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element 'CLASS'

            limit {
                counter = 'INSTRUCTION' // INSTRUCTION로 변경
                value = 'COVEREDRATIO'
                minimum = 0.1
            }

            excludes = [
                    '*.*Application',
                    '*.*Controller',
                    '*.dto.*',
                    '*.config.*',
                    '*.common.*',
                    '*.entity.*',
                    '*.*Builder',
                    '*.exception.*',
                    '*.service.*',
                    '*.repository.*',
                    '*.security.*',
                    '*.chat.*',
                    '*.elasticsearch.*',
                    '*.filter.*',
                    '*.PasswordEncryptor',
                    '*.component.*',
                    '*.*jooq.*',
                    '*.ViewCountManager']
        }
    }
}

// application-key.properties 파일 경로
def propertiesFile = file('src/main/resources/application-key.properties')

// Properties 객체 생성
def properties = new Properties()
properties.load(new FileInputStream(propertiesFile))

// 프로퍼티 읽기
String dbHost = properties.getProperty("mariadb.host") ?: "localhost"
String dbPort = properties.getProperty("mariadb.port") ?: "3306"
String dbName = properties.getProperty("db.name") ?: "root"
String dbPassword = properties.getProperty("db.password") ?: "passwd"

//println(dbHost);
//println(dbPort);
//println(dbName);
//println(dbPassword);

jooq {
    version = "${jooqVersion}"

    configurations {
        medihubDb {
            generationTool{
                jdbc {
                    driver = 'org.mariadb.jdbc.Driver'
                    url = "jdbc:mariadb://${dbHost}:${dbPort}"
                    user = "${dbName}"
                    password = "${dbPassword}"
                }

                // Generator 설정
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.mariadb.MariaDBDatabase'
                        schemata {
                            schema {
                                inputSchema = 'medihub'
                            }
                        }
                    }

                    generate {
                        daos = true                 // dao 생성
                        records = true              // record 생성
                        fluentSetters = true        // 본인 반환
                        javaTimeTypes = true        // LocalDateTime (false -> DateTimeStamp)
                        deprecated = false
                    }

                    target {
                        directory = 'src/generated'
                    }

                    strategy.name = 'jooq.custom.generator.JPrefixGeneratorStrategy'
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/generated"]
        }
    }
}